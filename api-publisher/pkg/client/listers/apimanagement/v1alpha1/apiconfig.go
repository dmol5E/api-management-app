/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/dmol5e/api-management-app/api-publisher/pkg/apis/apimanagement/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// APIConfigLister helps list APIConfigs.
// All objects returned here must be treated as read-only.
type APIConfigLister interface {
	// List lists all APIConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.APIConfig, err error)
	// APIConfigs returns an object that can list and get APIConfigs.
	APIConfigs(namespace string) APIConfigNamespaceLister
	APIConfigListerExpansion
}

// aPIConfigLister implements the APIConfigLister interface.
type aPIConfigLister struct {
	indexer cache.Indexer
}

// NewAPIConfigLister returns a new APIConfigLister.
func NewAPIConfigLister(indexer cache.Indexer) APIConfigLister {
	return &aPIConfigLister{indexer: indexer}
}

// List lists all APIConfigs in the indexer.
func (s *aPIConfigLister) List(selector labels.Selector) (ret []*v1alpha1.APIConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.APIConfig))
	})
	return ret, err
}

// APIConfigs returns an object that can list and get APIConfigs.
func (s *aPIConfigLister) APIConfigs(namespace string) APIConfigNamespaceLister {
	return aPIConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// APIConfigNamespaceLister helps list and get APIConfigs.
// All objects returned here must be treated as read-only.
type APIConfigNamespaceLister interface {
	// List lists all APIConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.APIConfig, err error)
	// Get retrieves the APIConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.APIConfig, error)
	APIConfigNamespaceListerExpansion
}

// aPIConfigNamespaceLister implements the APIConfigNamespaceLister
// interface.
type aPIConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all APIConfigs in the indexer for a given namespace.
func (s aPIConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.APIConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.APIConfig))
	})
	return ret, err
}

// Get retrieves the APIConfig from the indexer for a given namespace and name.
func (s aPIConfigNamespaceLister) Get(name string) (*v1alpha1.APIConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apiconfig"), name)
	}
	return obj.(*v1alpha1.APIConfig), nil
}
