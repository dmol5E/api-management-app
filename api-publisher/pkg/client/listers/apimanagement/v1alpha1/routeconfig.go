/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/dmol5e/api-management-app/api-publisher/pkg/apis/apimanagement/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RouteConfigLister helps list RouteConfigs.
// All objects returned here must be treated as read-only.
type RouteConfigLister interface {
	// List lists all RouteConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RouteConfig, err error)
	// RouteConfigs returns an object that can list and get RouteConfigs.
	RouteConfigs(namespace string) RouteConfigNamespaceLister
	RouteConfigListerExpansion
}

// routeConfigLister implements the RouteConfigLister interface.
type routeConfigLister struct {
	indexer cache.Indexer
}

// NewRouteConfigLister returns a new RouteConfigLister.
func NewRouteConfigLister(indexer cache.Indexer) RouteConfigLister {
	return &routeConfigLister{indexer: indexer}
}

// List lists all RouteConfigs in the indexer.
func (s *routeConfigLister) List(selector labels.Selector) (ret []*v1alpha1.RouteConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RouteConfig))
	})
	return ret, err
}

// RouteConfigs returns an object that can list and get RouteConfigs.
func (s *routeConfigLister) RouteConfigs(namespace string) RouteConfigNamespaceLister {
	return routeConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RouteConfigNamespaceLister helps list and get RouteConfigs.
// All objects returned here must be treated as read-only.
type RouteConfigNamespaceLister interface {
	// List lists all RouteConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RouteConfig, err error)
	// Get retrieves the RouteConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RouteConfig, error)
	RouteConfigNamespaceListerExpansion
}

// routeConfigNamespaceLister implements the RouteConfigNamespaceLister
// interface.
type routeConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RouteConfigs in the indexer for a given namespace.
func (s routeConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RouteConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RouteConfig))
	})
	return ret, err
}

// Get retrieves the RouteConfig from the indexer for a given namespace and name.
func (s routeConfigNamespaceLister) Get(name string) (*v1alpha1.RouteConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("routeconfig"), name)
	}
	return obj.(*v1alpha1.RouteConfig), nil
}
